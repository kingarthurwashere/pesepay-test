import { Transaction } from "./payments/transaction";
import { Payment } from "./payments/payment";
import { PesepayResponse } from './response';
export declare class Pesepay {
    private readonly integrationKey;
    private readonly encryptionKey;
    private readonly headers;
    resultUrl?: string;
    returnUrl?: string;
    constructor(integrationKey: string, encryptionKey: string);
    initiateTransaction: (transaction: Transaction) => Promise<PesepayResponse>;
    checkPayment: (referenceNumber: string) => Promise<PesepayResponse>;
    pollTransaction: (pollUrl: string) => Promise<PesepayResponse>;
    makeSeamlessPayment: (payment: Payment, reasonForPayment: string, amount: number, requiredFields?: {} | undefined) => Promise<PesepayResponse>;
    createPayment: (currencyCode: string, paymentMethodCode: string, email?: string | undefined, phone?: string | undefined, name?: string | undefined) => Payment;
    createTransaction: (amount: number, currencyCode: string, paymentReason: string, merchantReference?: string | undefined) => Transaction;
    private payloadEncrypt;
    private payloadDecrypt;
    private buildCipher;
}
//# sourceMappingURL=pesepay.d.ts.map